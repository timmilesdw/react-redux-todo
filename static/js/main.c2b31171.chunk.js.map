{"version":3,"sources":["assets/logo192.png","store/root-reducer.ts","components/Link.tsx","constants.ts","components/Navigation.tsx","store/hooks/useRootDispatcher.ts","components/TodoAdd.tsx","components/Todo.tsx","components/ImageTilt.tsx","router.ts","components/Home.tsx","components/Dash.tsx","App.tsx","store/index.ts","alert.config.ts","index.tsx","components/Alert.tsx"],"names":["module","exports","ActionType","Link","to","children","absolute","props","Navigation","Header","style","backgroundColor","align","shape","size","initialState","id","title","description","completed","Actions","AddTodo","state","payload","DeleteTodo","filter","el","CompleteTodo","map","todo","useRootDispatcher","dispatch","useDispatch","createTodo","values","type","Math","round","random","deleteTodo","completeTodo","TodoAdd","alert","useAlert","rootDispatcher","Form","useForm","form","width","marginTop","layout","name","initialValues","remember","onFinish","show","resetFields","onFinishFailed","errorInfo","errorFields","errors","error","Item","label","rules","required","message","placeholder","htmlType","Todo","handleDelete","handleComplete","extra","onClick","CheckOutlined","hoverable","calc","x","y","window","innerHeight","innerWidth","trans","s","ImageTilt","useSpring","xys","config","mass","tension","friction","set","div","onMouseMove","clientX","clientY","onMouseLeave","transform","interpolate","src","logo","preview","routes","path","component","className","justify","useState","addTodo","setAddTodo","useSelector","console","log","i","key","App","background","basepath","Route","store","createStore","action","reducerReturn","default","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","template","showIcon","closable","document","getElementById"],"mappings":"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","file":"static/js/main.c2b31171.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.acec03b2.png\";","import { Action, Reducer } from 'redux'\r\n\r\nexport interface InitialState  {\r\n    id: number\r\n    title: string,\r\n    description?: string\r\n    completed: boolean\r\n}\r\n\r\nexport interface ITodo {\r\n    title: string,\r\n    description?: string\r\n}\r\n\r\nexport const initialState: InitialState[] = [\r\n    { id: 1, title: 'Yo!', description: 'Try adding some todos!', completed: false },\r\n]\r\n\r\nexport enum ActionType {\r\n    AddTodo,\r\n    DeleteTodo,\r\n    CompleteTodo\r\n} \r\n\r\nexport interface DispatchAction extends Action {\r\n    payload: InitialState\r\n}\r\n\r\nconst Actions = {\r\n    [ActionType.AddTodo]: (state: InitialState[], { payload }: DispatchAction): InitialState[] => ([ ...state, payload ]),\r\n    [ActionType.DeleteTodo]: (state: InitialState[], { payload }: DispatchAction): InitialState[] => state.filter((el) => el.id !== payload.id) ,\r\n    [ActionType.CompleteTodo]: (state: InitialState[], { payload }: DispatchAction): InitialState[] =>  state.map(\r\n        (todo) => todo.id === payload.id ? { ...todo, completed: !todo.completed } : todo\r\n    ),\r\n    default: (state: InitialState[]) => state\r\n}\r\n\r\n\r\n\r\nexport const rootReducer: Reducer<InitialState[], DispatchAction> = (state = initialState, action) => {\r\n    const reducerReturn = Actions[action.type as ActionType] || Actions.default\r\n\r\n    return reducerReturn(state, action)\r\n}","import React, { ReactElement } from 'react'\r\nimport { Link as RLink } from '@reach/router'\r\nimport { BASEPATH } from '../constants'\r\n\r\ninterface Props {\r\n    to: string\r\n    children: ReactElement\r\n    absolute?: string\r\n    props?: any\r\n}\r\n\r\nexport const Link: React.FC<Props> = ({ to = '', children, absolute, ...props }) => {\r\n    if (!absolute) {\r\n      to = BASEPATH + to\r\n    }\r\n    return (\r\n      <RLink {...props} to={to}>\r\n        {children}\r\n      </RLink>\r\n    )\r\n  }","// Include basepath here\r\nexport const BASEPATH = '/react-redux-todo'","import React from 'react'\r\nimport { Layout, Button, Space } from 'antd'\r\nimport { Link } from './Link'\r\n\r\ninterface Props {}\r\n\r\nexport const Navigation: React.FC<Props> = () => (\r\n    <Layout.Header style={{ backgroundColor: '#039be5'}}>\r\n        <Space align='center'>\r\n            <Link to='/'>\r\n                <Button shape='round' size='large'>Home</Button>\r\n            </Link>\r\n            <Link to='/todos'>\r\n                <Button shape='round' size='large'>Todos</Button>\r\n            </Link>\r\n        </Space>\r\n    </Layout.Header>\r\n)\r\n","import { useDispatch } from 'react-redux'\r\nimport { ActionType, ITodo } from '../root-reducer'\r\n\r\nexport const useRootDispatcher = () => {\r\n    const dispatch = useDispatch()\r\n    return {\r\n        createTodo: (values: ITodo) => dispatch({ type: ActionType.AddTodo, payload: { ...values, id: Math.round(Math.random() * 100), completed: false }}),\r\n        deleteTodo: (id: number) => dispatch({ type: ActionType.DeleteTodo, payload: { id } }),\r\n        completeTodo: (id: number) => dispatch({ type: ActionType.CompleteTodo, payload: { id } }),\r\n    }\r\n}","import { Card, Input, Form, Button } from 'antd'\r\nimport React from 'react'\r\nimport { useAlert } from 'react-alert'\r\nimport { useRootDispatcher } from '../store/hooks/useRootDispatcher'\r\nimport { ITodo } from '../store/root-reducer'\r\n\r\ninterface Props {}\r\n\r\nexport const TodoAdd: React.FC<Props> = () => {\r\n    \r\n    const alert = useAlert()\r\n    const rootDispatcher = useRootDispatcher()\r\n    const [ form ] = Form.useForm()\r\n\r\n\r\n    const onFinishFailed = (errorInfo: { [key: string]: any }): void => {\r\n        errorInfo.errorFields && errorInfo.errorFields.map((errors: { name: string[], errors: string[] }) => {\r\n            errors.errors.map((error: string) => {\r\n                alert.show(error, {\r\n                    type: 'error'\r\n                })\r\n            })\r\n        })\r\n    }\r\n    const onFinish = (values: ITodo): void => {\r\n        rootDispatcher.createTodo(values)\r\n        alert.show('Todo is succesfully created', {\r\n            type: 'success'\r\n        })\r\n        form.resetFields()\r\n    }\r\n    \r\n    return (\r\n        <Card title=\"Add todo\" style={{ width: 300, marginTop: '25px' }}>\r\n            <Form\r\n                layout=\"vertical\"\r\n                name=\"basic\"\r\n                form={form}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    rules={[{ required: true, message: 'Please input your todos title' }]}\r\n                >\r\n                    <Input placeholder='Watch a movie'/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <Input placeholder='Not pretty sure which' />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Card>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport { Button, Card } from 'antd'\r\nimport { InitialState } from '../store/root-reducer'\r\n\r\nimport { CheckOutlined } from '@ant-design/icons'\r\n\r\ninterface Props extends InitialState {\r\n    handleDelete: (id: number) => void\r\n    handleComplete: (id: number) => void\r\n}\r\n\r\nexport const Todo: React.FC<Props> = ({ id, title, description, completed, handleDelete, handleComplete }) => { \r\n    return (\r\n        <Card \r\n            title={ title } \r\n            extra={\r\n                <>\r\n                    <Button onClick={() => { handleComplete(id) }} type=\"link\">Complete</Button>\r\n                    <Button onClick={() => { handleDelete(id) }} type=\"link\">Delete</Button>\r\n                    { completed ? <CheckOutlined /> : null }\r\n                </>\r\n            } \r\n            style={{ width: 300 }}\r\n            hoverable\r\n            >\r\n            { description ? <p>{description}</p> : <p>no description here</p> }\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Image } from 'antd'\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\nimport logo from '../assets/logo192.png'\r\n\r\n\r\ninterface Props {}\r\n\r\nconst calc = (x: number, y: number) => [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1]\r\nconst trans = (x:number, y: number, s: number) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\r\n\r\nexport const ImageTilt: React.FC<Props> = () => {\r\n    \r\n    const [props, set] = useSpring(() => ({ xys: [0, 0, 1], config: { mass: 2, tension: 150, friction: 100 } }))\r\n\r\n    return (\r\n        <animated.div\r\n            onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n            onMouseLeave={() => set({ xys: [0, 0, 1] })} \r\n            style={{ transform: props.xys.interpolate(trans as any) }}\r\n        >\r\n            <Image \r\n                src={logo} \r\n                preview={false}\r\n            />\r\n        </animated.div>\r\n    )\r\n}\r\n","import { Dash } from \"./components/Dash\";\r\nimport { Home } from \"./components/Home\";\r\n\r\nexport const routes = [\r\n    { \r\n        path: '/', \r\n        component: Home \r\n    },\r\n    { \r\n        path: 'todos', \r\n        component: Dash \r\n    }\r\n]","import React from 'react'\r\nimport { Link, RouteComponentProps } from '@reach/router'\r\nimport { Row, Button } from 'antd'\r\nimport { ImageTilt } from './ImageTilt'\r\n\r\ninterface Props extends RouteComponentProps {  }\r\n\r\nexport const Home: React.FC<Props> = () => (\r\n    <div className='container'>\r\n        \r\n        <ImageTilt />\r\n\r\n        <Row align='middle' justify='center'>\r\n            <h1>React Redux TodoApp</h1>\r\n        </Row>\r\n\r\n        <Row align='middle' justify='center'>\r\n            <p>\r\n                Simple 30 minutes todo app, created with Typescript, React and Redux\r\n            </p>\r\n        </Row>\r\n\r\n        <Row align='middle' justify='center'>\r\n            <Link to='todos'><Button size='large' type='primary' shape='round'>To Todos</Button></Link>\r\n        </Row>\r\n    </div>\r\n)\r\n","import React, { useState } from 'react'\r\nimport { RouteComponentProps } from '@reach/router'\r\nimport { Button } from 'antd'\r\nimport { TodoAdd } from './TodoAdd'\r\nimport { Todo } from './Todo'\r\nimport { useSelector } from 'react-redux'\r\nimport { InitialState } from '../store/root-reducer'\r\nimport { useRootDispatcher } from '../store/hooks/useRootDispatcher'\r\n\r\ninterface Props extends RouteComponentProps {}\r\n\r\n\r\nexport const Dash: React.FC<Props> = () => {\r\n    \r\n    const [addTodo, setAddTodo] = useState<boolean>(false)\r\n\r\n    const handleShowAdd = () => setAddTodo(!addTodo)\r\n\r\n    const state = useSelector<InitialState[], InitialState[]>((state: InitialState[]) => state)\r\n\r\n    const rootDispatcher = useRootDispatcher()\r\n\r\n    const handleDelete = (id: number) => {\r\n        rootDispatcher.deleteTodo(id)\r\n        console.log(`${id} deleted`)\r\n    }\r\n\r\n    const handleComplete = (id: number) => {\r\n        rootDispatcher.completeTodo(id)\r\n        console.log(`${id} completed`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container todos\">\r\n            <Button onClick={handleShowAdd}> Add Todo </Button>\r\n            { addTodo && <TodoAdd /> }\r\n            <div className=\"todos-grid\">\r\n                { state && state.map((todo, i) => <Todo key={i} { ...{...todo, handleDelete, handleComplete } } />) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport Layout from 'antd/lib/layout/layout'\n\nimport { Router } from \"@reach/router\"\nimport { Navigation } from './components/Navigation'\n\nimport { routes } from './router'\nimport { BASEPATH } from './constants'\n\nconst App = () => {\n    return (\n        <Layout style={{background: 'none'}}>\n            <Navigation />\n            <Router basepath={BASEPATH}>\n                { routes.map(( Route, i ) => <Route.component key={i} path={Route.path} />) }\n            </Router>\n        </Layout>\n    )\n}\n\nexport default App\n","import { createStore } from 'redux'\r\nimport { DispatchAction, InitialState, rootReducer } from './root-reducer'\r\n\r\nexport const store = createStore<InitialState[], DispatchAction, null, null>(rootReducer)","import { transitions, positions } from 'react-alert'\r\n\r\nexport const options = {\r\n    position: positions.BOTTOM_CENTER,\r\n    timeout: 5000,\r\n    offset: '30px',\r\n    transition: transitions.SCALE\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nimport { Provider as AlertProvider } from 'react-alert'\n\nimport { AlertTemplate } from './components/Alert'\nimport { options } from './alert.config'\n\nimport './styles/index.css'\n\nReactDOM.render(\n\t<AlertProvider template={AlertTemplate} {...options}>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>,\n\t</AlertProvider>,\n\tdocument.getElementById('root')\n);","import React from 'react'\r\nimport { Alert } from 'antd'\r\n\r\nconst AlertTemplate = ({ message, options, style }: any) => {\r\n\treturn (\r\n\t\t<Alert\r\n\t\t\tstyle={{ ...style }}\r\n\t\t\tshowIcon\r\n\t\t\tclosable\r\n\t\t\tmessage={message}\r\n\t\t\ttype={\r\n\t\t\t\toptions.type === 'info'\r\n\t\t\t\t\t? 'info'\r\n\t\t\t\t\t: options.type === 'error'\r\n\t\t\t\t\t? 'error'\r\n\t\t\t\t\t: options.type === 'warning'\r\n\t\t\t\t\t? 'warning'\r\n\t\t\t\t\t: options.type === 'success'\r\n\t\t\t\t\t? 'success'\r\n\t\t\t\t\t: 'info'\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t{ message }\r\n\t\t</Alert>\r\n\t)\r\n}\r\n\r\nexport { AlertTemplate }\r\n"],"sourceRoot":""}